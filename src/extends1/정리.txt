[상속]

- 상속 관계의 객체를 생성하면 그 내부에는 부모와 자식이 모두 생성된다.
- 상속 관계의 객체를 호출할 때, 대상 타입을 정해야한다. 이때 호출자의 타입을 통해 대상 타입을 찾는다.
- 현재 타입에서 기능을 찾지 못하면 상위 부모 타입으로 기능을 찾아서 실행한다. 기능을 찾지 못하면 컴파일 오류가 발생한다.

Overloading & overriding

- 메서드 오버로딩 : 메서드 이름이 같고 매개변수(파라미트)가 다른 메서드를 여러개 정의하는 것을 메서드 오버로딩(Overloading)이라 한다. 오버로딩은 번역하면 과적이다. 따라서 같은 이름의 메서드를 여러개 정의했다고 이해하면 된다. 
- 메서드 오버라이딩 : 메서드 오버라이딩은 하위 클래스에서 상위 클래스의 메서드를 재정의하는 과정을 의미한다. 따라서 상속 관계에서 사용한다. 부모의 기능을 자식이 다시 정의하는 것이다. 오버라이딩을 단순히 해석하면 무언가를 넘어서 타는 것을 말한다. 자식의 새로운 기능이 부모의 기존 기능을 넘어 타서 기존 기능을 새로운 기능으로 덮어버린다고 이해하면 된다. 오버라이딩을 우리말로 번역하면 무언가를 다시 정의한다고 해서 재정의라고 한다. 상속 관계에서는 기존 기능을 다시 정의한다고 이해하면 된다. 실무에서는 메서드 오버라이딩, 메서드 재정의 둘다 사용한다.

메서드 오버라이딩 조건
- 메서드 이름이 같아야 한다.
- 메서드 매개변수(파라미터): 타입, 순서, 개수가 같아야 한다.
- 반환 타입: 반환 타입이 같아야한다. 단, 반환 타입이 하위 클래스 타입일 수 있다.
- 접근 제어자: 오버라이딩 메서드의 접근 제어자는 상위 클래스의 메서드보다 제한적이어서는 안된다.
- 예외: 오버라이딩 메서드는 상위 클래스의 메서드보다 더 많은 체크 예외를 throws 로 선언할 수 없다. 하지만. 더 적거나 같은 수의 예외, 또는 하위 타입의 예외는 선언 가능하다. 예외를 학습해야 이해할 수 있음.
- static, final, private: 키워드가 붙은 메서드는 오버라이딩 될 수 없다.
    - static은 클래스 레벨에서 작동하므로 인스턴스 레벨에서 사용하는 오버라이딩이 의미가 없다. 쉽게 얘기해서 그냥 클래스 이름을 통해 필요한 곳에 직접 접근하면 된다.
    - final 메서드는 재정의를 금지한다.
    - private 메서드는 해당 클래스에서만 접근 가능하기 때문에 하위 클래스에서 보이지 않는다. 따라서 오버라이딩 할 수 없다.
- 생성자 오버라이딩: 생성자는 오버라이딩 할 수 없다.

super - 생성자

상속 관계의 인스턴스를 생성하면 결국 메모리 내부에는 자식과 부모 클래스가 각각 다 만들어진다. Child 를 만들면 부모인 Parent 까지 함께 만들어지는 것이다. 따라서 각각의 생성자도 모두 호출되어야 한다.

상속 관계를 사용하면 자식 클래스의 생성자에서 부모 클래스의 생성자를 반드시 호출해야 한다.(규칙)
- 상속 관계에서 부모의 생성자를 호출할 때는 super(…) 를 사용하면 된다.


정리

클래스와 메서드에 붙는 final

- 클래스에 final
    - 상속 끝
    - final 로 선언한 클래스는 확장될 수 없다. 다른 클래스가 final 로 선언된 클래스를 상속 받을 수 없다.

- 메서드에 final
    - 오버라이딩 끝
    - final 로 선언된 메서드는 오버라이드 될 수 없다. 상속받은 서브 클래스에서 이 메서드를 변경할 수 없다.

상속과 메모리 구조

- 핵심 : 상속관계의 객체를 생성하면 그 내부에 부모랑 자식이 다 생성이 된다
    - 심지어 생성자도 다 호출된다
    - 호출자의 변수의 타입에 맞춰서 거기서부터 찾고, 없으면 부모 클래스로 올라가서 찾는다, 그래도 없으면 컴파일 에러

메서드 오버라이딩
- 부모 메서드의 기능을 새롭게 재정의 하는 것
- @Override annotation 을 적극 활용하자
