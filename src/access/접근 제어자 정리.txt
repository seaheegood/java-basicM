[접근 제어자]

접근 제어자 이해

자바는 public, private 같은 접근 제어자(access modifier)를 제공한다. 접근 제어자를 사용하면 해당 클래스 외부에서 특정 필드나 메서드에 접근하는 것을 허용하거나 제한할 수 있다.

접근 제어자 종류

- private : 모든 외부 호출을 막는다.
- default(package-private) : 같은 패키지안에서 호출은 허용한다.
- protected : 같은 패키지안에서 호출을 허용한다. 패키지가 달라도 상속 관계의 호출을 허용한다.
- public : 모든 외부 호출을 허용한다.

다음과 같은 순서대로 허용도가 높다
private -> default -> protected -> public

- private : 나의 클래스 안으로 속성과 기능을 숨길 때 사용, 외부 클래스에서 해당 기능을 호출할 수 없다.
- default : 나의 패키지 안으로 속성과 기능을 숨길 때 사용, 외부 패키지에서 해당 기능을 호출할 수 없다.
- protected : 상속관계로 속성과 기능을 숨길떄 사용, 상속 관계가 아닌 곳에서 해당 기능을 호출할 수 없다.
- public : 기능을 숨기지 않고 어디서든 호출하여 사용할 수 있다.

클래스 레벨

클래스 레벨의 접근 제어자 규칙
- 클래스 레벨의 접근 제어자는 public, default 만 사용할 수 있다.
    - private, protected 는 사용 불가
- public 클래스는 반드시 파일명과 이름이 같아야한다.
    - 하나의 자바 파일에 public 클래스는 하나만 등장할 수 있다.
    - 하나의 자바 파일에 default 접근 제어자를 사용하는 클래스는 무한정 만들 수 있다.

캡슐화(Encapsulation)

데이터와 해당 데이터를 처리하는 메서드를 사나로 묶어서 외부에서 접근을 제한하는 것을 말한다. 캡슐화를 통해 데이터의 직접적인 변경을 방지하거나 제한할 수 있다. 쉽게 이야기해서 속성과 기능을 하나로 묶고, 외부에 꼭 필요한 기능만 노출 시키고 나머지는 내부로 숨기는 것을 뜻한다.

어떤것을 숨기고 어떤 것을 노출시켜야 할까?

1. 데이터를 숨겨라: 캡슐화에서 필수로 숨겨야 하는 것은 속성(데이터) 이다. 객체 내부의 데이터를 외부에서 함부로 접근하게 두면, 클래스 안에서 데이터를 다루는 모든 로직을 무시하고 데이터를 변경할 수 있기에 모든 안정망을 빠져나가게 된다. 따라서 캡슐화가 깨진다.  자동차를 운전할 때 자동차 부품을 다 열어서 그 안에 있는 속도계를 직접 조절하지 않는다. 단지 자동차가 제공하는 엑셀기능을 사용해서 엑셀을 밟으면 자동차가 나머지는 다 알아서 하는 것이다.  객체의 데이터는 객체가 제공하는 기능인 메서드를 통해서 접근해야 한다.
2. 기능을 숨겨라: 객체의 기능 중에서 외부에서 사용하지 않고 내부에서만 사용하는 기능들이 있다. 이런 기능은 모두 감추는 것이다 좋다. 우리가 자동차를 운전하기 위해 자동차가 제공하는 복잡한 엔진 조절 기능, 배기 기능까지 우리가 알 필요는 없다. 우리는 단지 엑셀과 핸들 정도의 기능만 알면 된다. 만약 사용자에게 이런 기능까지 모두 알려준다면, 사용자가 자동차에 대해 너무 많은 것을 알아야 한다. 사용자 입장에서 필요한 기능만 외부에 노출하자. 나머지 기능은 모두 내부로 숨기자

정리하면 데이터는 모두 숨기고, 기능은 꼭 필요한 기능만 노출하는 것이 좋은 캡슐화이다.
